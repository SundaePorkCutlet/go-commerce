services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    container_name: go-commerce-postgres
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - go-commerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d user"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: go-commerce-redis
    command: redis-server --requirepass admin
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - go-commerce-network

  # USERFC 서비스
  userfc:
    build:
      context: ./USERFC
      dockerfile: Dockerfile
    container_name: go-commerce-userfc
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=user
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=admin
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - go-commerce-network
    restart: on-failure

  # DB 초기화 헬퍼
  db-init:
    image: postgres:15
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go-commerce-network
    command: >
      sh -c "
        PGPASSWORD=admin psql -h postgres -U admin -d user -c 'CREATE DATABASE product;' || true
      "
    restart: "no"

  # PRODUCTFC 서비스
  productfc:
    build:
      context: ./PRODUCTFC
      dockerfile: Dockerfile
    container_name: go-commerce-productfc
    ports:
      - "8082:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=product
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=admin
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      db-init:
        condition: service_completed_successfully
    networks:
      - go-commerce-network
    restart: on-failure


volumes:
  postgres_data:
  redis_data:

networks:
  go-commerce-network:
    driver: bridge
